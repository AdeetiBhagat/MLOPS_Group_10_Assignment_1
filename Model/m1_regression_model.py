# -*- coding: utf-8 -*-
"""M1_Regression_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11JADe14Mg_4DPojv2u6gMV9b1LgozFkj

## Import Libraries / Dataset

```
1. Import the required libraries
```
"""

import warnings
warnings.simplefilter('ignore') # to suppress unnecessary warnings

import io

import pandas as pd
import numpy as np
import seaborn as sns

import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
try:
    from google.colab import files
    IN_COLAB = True
except ImportError:
    IN_COLAB = False

# For visualization settings
sns.set(style="whitegrid")

"""```
2. Download the dataset
```
"""

# Load the dataset-Different code for Colab done
if IN_COLAB:
  insurance_dataset = files.upload()
  # Get the file name
  file_name = next(iter(insurance_dataset.keys()))
  # Load the DataFrame from the uploaded file
  df_insurance = pd.read_csv(file_name)
else:
  df_insurance = pd.read_csv('insurance-1.csv')  # Assuming the file is in the current directory

"""```
Print 2 rows for sanity check to identify all the features present in the dataset and if the target matches with them.
```
"""

print(df_insurance.head(2))
print("Size of Dataset:", len(df_insurance))

"""```
3. Pre-Processing the Data
```
"""

# Check for categorical variables
print(df_insurance.info())

# If 'sex', 'smoker', or 'region' are categorical, convert them using one-hot encoding
df_insurance = pd.get_dummies(df_insurance, drop_first=True)

# Display the first few rows to confirm changes
print(df_insurance.head())

"""```
4. Define Features and Target Variable
```
"""

# Assuming 'charges' is the target variable and others are features
X = df_insurance.drop('charges', axis=1)
y = df_insurance['charges']

"""```
5. Split the Data into Training and Testing Sets
```
"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""```
6. Train a Linear Regression Model
```
"""

# Initialize the model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

"""```
7. Make Predictions
```
"""

# Predict on the test set
y_pred = model.predict(X_test)

"""```
8. Evaluate the Model
```
"""

# Calculate mean squared error and R-squared
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

"""```
9. Visualize the Results
```
"""

# Plot the actual vs predicted values
plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel('Actual Charges')
plt.ylabel('Predicted Charges')
plt.title('Actual vs Predicted Charges')
plt.show()